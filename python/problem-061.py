#! /usr/bin/env python3

import itertools

description = '''
Cyclical figurate numbers
Problem 61
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 		P4,n=n2	 		1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
'''

def isconnected(a,b):
  return a[0] != b[0] and a[1] % 100 == b[1] // 100

def search(space, path, n):
  if len(path) == n:
    if isconnected(path[-1], path[0]): 
      return path
    else:
      return None

  p = path[-1]
  sspace = [x for x in space if x[0] not in (y[0] for y in path) and isconnected(p, x)]
  for c in sspace:
    r = search(space, path + [c], n)
    if r is not None:
      return r

def tri(n): return n*(n + 1)/2
def squ(n): return n*n
def pen(n): return n*(3*n - 1)/2
def hex(n): return n*(2*n - 1)
def hep(n): return n*(5*n - 3)/2
def oct(n): return n*(3*n - 2)

def fourdigit(f):
  for i in itertools.count():
    y = f(i)
    if y >= 10000: break
    if y >= 1000: yield y

triangulars = list(zip(itertools.repeat(3), fourdigit(tri)))
squares     = list(zip(itertools.repeat(4), fourdigit(squ)))
pentagonals = list(zip(itertools.repeat(5), fourdigit(pen)))
hexagonals  = list(zip(itertools.repeat(6), fourdigit(hex)))
heptagonals = list(zip(itertools.repeat(7), fourdigit(hep)))
octagonals  = list(zip(itertools.repeat(8), fourdigit(oct)))

polygonals = triangulars + squares + pentagonals + hexagonals + heptagonals + octagonals

assert((3, 8128) in triangulars)
assert((5, 2882) in pentagonals)
assert((4, 8281) in squares)
assert(isconnected((3, 8128), (5, 2882)))
assert(isconnected((5, 2882), (4, 8281)))
assert(isconnected((4, 8281), (3, 8128)))             

for n in polygonals:
  result = search(polygonals, [n], 6)
  if result is not None:
    print(result, sum(x[1] for x in result))
    break
